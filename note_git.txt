

build : changements qui affectent le système de build ou des dépendances externes (npm, make…)
ci : changements concernant les fichiers et scripts d’intégration ou de configuration (Travis, Ansible, BrowserStack…)
feat : ajout d’une nouvelle fonctionnalité
fix : correction d’un bug
perf : amélioration des performances
refactor : modification qui n’apporte ni nouvelle fonctionalité ni d’amélioration de performances
style : changement qui n’apporte aucune alteration fonctionnelle ou sémantique (indentation, mise en forme, ajout d’espace, renommante d’une variable…)
docs : rédaction ou mise à jour de documentation
test : ajout ou modification de tests

revert.annuler un précédent commit. 
Dans ce cas, le message prend la forme suivante :
- revert sujet du commit annulé hash du commit annulé


Scope (Portée): OPTIONNELLE, entourée de parenthèses (ex: fix(parser)).
!: OPTIONNEL pour indiquer un changement majeur.
Description: OBLIGATOIRE après les deux-points et espace.
Body: OPTIONNEL, commence une ligne vide après la description.
Footers: OPTIONNELS, commencent une ligne vide après le corps. Utiliser : ou # pour les séparer.


Changement Majeur (Breaking Change)
Prefixe: Ajouter ! avant : (ex: feat!: nouvelle API).
Footer: Peut être marqué avec BREAKING CHANGE: (ex: BREAKING CHANGE: les variables d'environnement priment sur les fichiers de configuration).
Les tokens du footer utilisent - au lieu des espaces.


